#include <WiFi.h>                 
#include <HTTPClient.h>           
#include <HTTPUpdate.h>           
#include <WiFiClientSecure.h>     
#include <Preferences.h>          

// ===== USER CONFIG =====
const char* WIFI_SSID     = "LMT_0A29";   
const char* WIFI_PASSWORD = "nm3MHB9YbT2";// Your Wi‑Fi password

// Full‑length MaintainX API token
const char* MAINTX_TOKEN  =
  "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9."
  "eyJ1c2VySWQiOjc0MjA4Nywib3JnYW5pemF0aW9uSWQiOjMzMDU2NiwiaWF0IjoxNzUyMTM0ODExLCJzdWIiOiJSRVNUX0FQSV9BVVRIIiwianRpIjoiYmU0ZmE4MWEtZWFmMi00YmY5LTlmYzYtMzFmN2I0NzRiMzljIn0."
  "ZAU4qG6zy_WxHgX065oNeyxmF72sb95tmECCWHJ5T9s";
const char* MAINTX_URL    = "https://api.getmaintainx.com/v1/meterreadings"; 
const char* METER_ID      = "423679";          

// —— UPDATED: use jsDelivr CDN for clean binary delivery ——
const char* VERSION_URL   = "https://raw.githubusercontent.com/edzenis/esp32mx/refs/heads/main/version.txt";
const char* FIRMWARE_URL  = "https://cdn.jsdelivr.net/gh/edzenis/esp32mx@main/firmware.bin";

const int   SENSOR_PIN    = 4;                 

// ===== STATE =====
Preferences prefs;        
unsigned long activeMs     = 0; 
unsigned long lastLoopMs   = 0; 
unsigned long lastReportMs = 0; 
unsigned long lastOtaMs    = 0; 

void setup() {
  Serial.begin(115200);      
  delay(100);                

  prefs.begin("app", false); 
  activeMs = prefs.getULong("activeMs", 0);
  float ver = prefs.getFloat("ver", 0.0);
  Serial.println("Boot version: " + String(ver));

  pinMode(SENSOR_PIN, INPUT_PULLDOWN);

  Serial.print("WiFi connecting to "); Serial.println(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print('.');
  }
  Serial.println();                          
  Serial.println("WiFi connected: " + WiFi.localIP().toString());

  lastLoopMs   = millis();
  lastReportMs = lastLoopMs;
  lastOtaMs    = lastLoopMs;
}

void loop() {
  unsigned long now   = millis();
  unsigned long delta = now - lastLoopMs;
  lastLoopMs = now;

  if (digitalRead(SENSOR_PIN) == HIGH) {
    activeMs += delta;
  }

  // REPORT every 60s
  if (now - lastReportMs >= 60000UL) {
    Serial.println("Reporting to MaintainX...");
    HTTPClient http;
    http.begin(MAINTX_URL);
    http.addHeader("Authorization", MAINTX_TOKEN);
    http.addHeader("Content-Type", "application/json");
    unsigned long secs = activeMs / 1000;
    String body = "[{\"meterId\":" + String(METER_ID)
                + ",\"value\":"   + String(secs) + "}]";
    int code = http.POST(body);
    Serial.println("Report HTTP code: " + String(code));
    if (code >= 200 && code < 300) {
      prefs.putULong("activeMs", activeMs);
      Serial.println("MaintainX data saved");
    }
    http.end();
    lastReportMs = now;
  }

  // OTA every 60s
  if (now - lastOtaMs >= 60000UL) {
    Serial.println("\n=== OTA Check ===");

    float oldVer = prefs.getFloat("ver", 0.0);
    Serial.print("Saved version: "); Serial.println(oldVer);

    WiFiClientSecure client;
    client.setInsecure();
    HTTPClient httpV;
    Serial.println("Fetching version.txt...");
    httpV.begin(client, VERSION_URL);
    int vcode = httpV.GET();
    if (vcode == HTTP_CODE_OK) {
      String newVerStr = httpV.getString();
      newVerStr.trim();
      Serial.print("Raw repo version: "); Serial.println(newVerStr);

      if (newVerStr.startsWith("v") || newVerStr.startsWith("V")) {
        newVerStr = newVerStr.substring(1);
        Serial.print("Stripped leading 'v', now: "); Serial.println(newVerStr);
      }

      float newVer = newVerStr.toFloat();
      Serial.print("Parsed repo version: "); Serial.println(newVer);

      if (newVer > oldVer) {
        Serial.println("New version found! Starting OTA...");

        HTTPUpdate httpUpdate;
        httpUpdate.rebootOnUpdate(false);
        Serial.println("Downloading + flashing firmware.bin...");
        t_httpUpdate_return ret = httpUpdate.update(client, FIRMWARE_URL);

        if (ret == HTTP_UPDATE_OK) {
          Serial.println("OTA successful!");
          prefs.putFloat("ver", newVer);
          Serial.println("Rebooting now...");
          ESP.restart();
        } else {
          Serial.printf("HTTPUpdate failed (%d): %s\n",
            httpUpdate.getLastError(),
            httpUpdate.getLastErrorString().c_str());
        }
      } else {
        Serial.println("No newer version");
      }
    } else {
      Serial.printf("version.txt fetch failed, HTTP %d\n", vcode);
    }
    httpV.end();
    lastOtaMs = now;
    Serial.println("=== OTA Done ===\n");
  }
}
