#include <WiFi.h>
#include <HTTPClient.h>
#include <Preferences.h>

// ——— Wi‑Fi Settings ———————————————————————————————
const char WIFI_SSID[]     = "LMT_0A29";
const char WIFI_PASSWORD[] = "nm3MHB9YbT2";

// ——— MaintainX API Settings ————————————————————————
const char MAINTX_TOKEN[] = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9."
                           "eyJ1c2VySWQiOjc0MjA4Nywib3JnYW5pemF0aW9uSWQiOjMzMDU2NiwiaWF0IjoxNzUy"
                           "MTM0ODExLCJzdWIiOiJSRVNUX0FQSV9BVVRIIiwianRpIjoiYmU0ZmE4MWEtZWFmMi00"
                           "YmY5LTlmYzYtMzFmN2I0NzRiMzljIn0."
                           "ZAU4qG6zy_WxHgX065oNeyxmF72sb95tmECCWHJ5T9s";
const char MAINTX_URL[]   = "https://api.getmaintainx.com/v1/meterreadings";

// ——— Hardware & Timing ————————————————————————————
const int  SENSOR_PIN      = 4;               // GPIO4 sensor input
const long REPORT_INTERVAL = 60 * 1000L;      // how often to send data (ms)

Preferences prefs;            // saves totalActiveMs across reboots
unsigned long totalActiveMs;  // accumulated HIGH time (ms)
unsigned long lastMillis;     // for loop timing

// ——— Forward declaration ——————————————————————————
void sendToMaintainX();

void setup() {
  Serial.begin(115200);
  delay(100);

  // Restore saved active-time
  prefs.begin("uptime", false);
  totalActiveMs = prefs.getULong("activeMs", 0);

  // Prepare sensor pin
  pinMode(SENSOR_PIN, INPUT_PULLDOWN);

  // Connect to Wi‑Fi
  Serial.print("⏳ Connecting to Wi‑Fi");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" ✅ Connected");

  // Initialize loop timer
  lastMillis = millis();
}

void loop() {
  // Calculate elapsed time
  unsigned long now   = millis();
  unsigned long delta = now - lastMillis;
  lastMillis = now;

  // If sensor is HIGH, add to active time
  if (digitalRead(SENSOR_PIN) == HIGH) {
    totalActiveMs += delta;
  }

  // Periodic reporting
  static unsigned long lastReport = 0;
  if (now - lastReport >= REPORT_INTERVAL) {
    sendToMaintainX();
    lastReport = now;
  }
}

// Send accumulated time (seconds) to MaintainX API
void sendToMaintainX() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("⚠️ No Wi‑Fi – cannot report");
    return;
  }

  HTTPClient http;
  http.begin(MAINTX_URL);
  http.addHeader("Authorization", MAINTX_TOKEN);
  http.addHeader("Content-Type", "application/json");

  unsigned long secs = totalActiveMs / 1000;
  String json = "[{\"meterId\":423679,\"value\":" + String(secs) + "}]";

  int code = http.POST(json);
  if (code >= 200 && code < 300) {
    Serial.println("✅ Data sent: " + String(code));
    prefs.putULong("activeMs", totalActiveMs);
  } else {
    Serial.println("❌ Error " + String(code) + ": " + http.getString());
  }

  http.end();
}
