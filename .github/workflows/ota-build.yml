name: Build & Publish OTA Firmware

on:
  # Manual ‚ÄúRun workflow‚Äù button
  workflow_dispatch:
  # Auto-build when your sketch changes
  push:
    paths:
      - 'src/**'

# Give the workflow permission to push commits
permissions:
  contents: write

concurrency:
  group: ota-build-main
  cancel-in-progress: true

jobs:
  build:
    runs-on: self-hosted

    steps:
      #################################################################
      # 1) Checkout full repo history (needed to commit & push)
      #################################################################
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false   # we'll inject our own tokened remote

      #################################################################
      # 2) Sanity check tools
      #################################################################
      - name: Verify toolchain on runner
        run: |
          set -e
          command -v arduino-cli >/dev/null 2>&1 || { echo "‚ùå arduino-cli missing"; exit 1; }
          arduino-cli version
          command -v git >/dev/null 2>&1 || { echo "‚ùå git missing"; exit 1; }
          git --version

      #################################################################
      # 3) Clean build directory
      #################################################################
      - name: Reset build directory
        run: |
          rm -rf build
          mkdir build

      #################################################################
      # 4) Compile sketch into build/
      #################################################################
      - name: Compile firmware
        run: |
          set -e
          arduino-cli core update-index
          if ! arduino-cli core list | grep -q '^esp32:esp32'; then
            arduino-cli core install esp32:esp32
          fi
          arduino-cli compile \
            --fqbn esp32:esp32:esp32 \
            --output-dir build \
            src

      #################################################################
      # 5) Copy ONLY the firmware binary (ignore bootloader/merged/etc.)
      #################################################################
      - name: Prepare firmware.bin
        run: |
          set -e
          echo "build/ contents:"
          ls -lh build || true
          if [ ! -f build/src.ino.bin ]; then
            echo "‚ùå build/src.ino.bin not found"; exit 1
          fi
          cp build/src.ino.bin build/firmware.bin
          ls -lh build/firmware.bin

      #################################################################
      # 6) Commit & push firmware.bin (token auth)
      #################################################################
      - name: Commit & Push firmware.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}      # owner/repo
          BRANCH: ${{ github.ref_name }}      # current branch name (e.g. main)
        run: |
          set -e

          # Trust workspace (required on some self-hosted runners)
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          # Inject tokened remote so push is authenticated
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add build/firmware.bin || true

          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è  No firmware changes; skipping commit."
            exit 0
          fi

          git commit -m "üîÑ Automated firmware build for version $(cat version.txt 2>/dev/null || echo 'unknown')"
          # Push to the same branch the workflow ran from (usually main)
          git push origin HEAD:${BRANCH}
          echo "‚úîÔ∏è  firmware.bin pushed to ${BRANCH}."
